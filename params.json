{"name":"Oauth2play2scala","tagline":"oauth2 auth and token server for Play 2 Scala API. Ported from Apache Amber.","body":"oauth2play2scala\r\n================\r\n\r\noauth2 auth and token server for Play 2 Scala API. Ported from Apache Amber.\r\n\r\n\r\nAs Play2 document mentioned that impl an oauth2 server just piece of cake, so I give it a try, by found out not so easy.Because oauth2 spec is very board.\r\n\r\nThen I try to find the oauth2 impl for Play2. Basic idea is I want an impl that battle tested.\r\n\r\n1. securesocial is not an oauth2 server\r\n2. deadbolt is not an oauth2 server\r\n3. scalatra/oauth2-server is not a Play2 plugin\r\n4. raibledesigns.com/rd/entry/secure_json_services_with_play is not an oauth2 server\r\n\r\nBecause the above solutions not so fit, OK, at least let me try using Apache Amber from Scala/Play2, this one works with changed HttpServletRequest to play.api.mvc.Request !\r\n\r\nSo, everyone wants an oauth2 impl in Play2 Scala API and this project can save you 9 hours! ( I used more then this to port :-)  )\r\n\r\n\r\nHere is the usage:\r\n\r\n* Clone this repo and build the jar with mvn jar:jar\r\n* Copy the jar to Play2 project under lib/  \r\n* put this in your routes:\r\n\r\n```\r\nGET    /oauth2/auth    \t\t\tcontrollers.Application.auth()\r\n\r\nPOST \t/oauth2/token    \t\t\tcontrollers.Application.token()\r\n```\r\n* create the action like this (just the Apache Amber/Oltu wiki example in Scala Play 2):\r\n\r\n```\r\n  def auth = Action { implicit request =>\r\n    try {\r\n      //dynamically recognize an OAuth profile based on request characteristic (params,\r\n      // method, content type etc.), perform validation\r\n      val oauthRequest = new OAuthAuthzRequest(request)\r\n\r\n      //some code ....\r\n      if (oauthRequest.getClientSecret() == null) {\r\n        //              throw OAuthProblemException.error(\"404\", \"no such user\")\r\n      }\r\n\r\n      //build OAuth response\r\n      val resp = OAuthASResponse.\r\n        authorizationResponse(request, 302).\r\n        setCode(\"hfsfhkjsdf\").\r\n        location(\"http://app-host:9000/authz\").\r\n        buildQueryMessage();\r\n      Found(resp.getLocationUri())\r\n\r\n      //if something goes wrong\r\n    } catch {\r\n      case ex: OAuthProblemException =>\r\n\r\n        try {\r\n          val resp = OAuthResponse.\r\n            errorResponse(404).error(ex).location(\"http://app-host:9000/erro\").buildQueryMessage();\r\n          Redirect(resp.getLocationUri());\r\n\r\n        } catch {\r\n          case e: OAuthSystemException =>\r\n            e.printStackTrace();\r\n            InternalServerError(e.getMessage());\r\n        }\r\n      case ex: OAuthSystemException =>\r\n        ex.printStackTrace()\r\n        InternalServerError(ex.getMessage())\r\n\r\n    }\r\n\r\n  }\r\n\r\n  def token = Action { implicit request =>\r\n\r\n    val oauthIssuerImpl: OAuthIssuer = new OAuthIssuerImpl(new MD5Generator());\r\n\r\n    try {\r\n      val oauthRequest: OAuthTokenRequest = new OAuthTokenRequest(request);\r\n\r\n      val authzCode = oauthRequest.getCode();\r\n\r\n      // some code\r\n      // System.out.println(authzCode);\r\n\r\n      val accessToken = oauthIssuerImpl.accessToken();\r\n      val refreshToken = oauthIssuerImpl.refreshToken();\r\n\r\n      // some code\r\n      System.out.println(accessToken);\r\n      System.out.println(refreshToken);\r\n\r\n      val r = OAuthASResponse\r\n        .tokenResponse(200) //HttpServletResponse.SC_OK\r\n        .setAccessToken(accessToken)\r\n        .setExpiresIn(\"3600\")\r\n        .setRefreshToken(refreshToken)\r\n        .buildJSONMessage();\r\n\r\n      Ok(r.getBody());\r\n\r\n      //if something goes wrong\r\n    } catch {\r\n      case ex: OAuthProblemException =>\r\n        var r: OAuthResponse = null;\r\n        try {\r\n          r = OAuthResponse\r\n            .errorResponse(401)\r\n            .error(ex)\r\n            .buildJSONMessage();\r\n        } catch {\r\n          case e: OAuthSystemException =>\r\n            e.printStackTrace();\r\n            InternalServerError(e.getMessage());\r\n        }\r\n\r\n        InternalServerError(r.getBody());\r\n\r\n      case ex: OAuthSystemException =>\r\n        ex.printStackTrace()\r\n        InternalServerError(ex.getMessage())\r\n\r\n    }\r\n\r\n  }\r\n```  \r\n  \r\n* test url:\r\n\r\n  http://localhost:9000/oauth2/auth?scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile&state=%2Fprofile&redirect_uri=https%3A%2F%2Foauth2-login-demo.appspot.com%2Fcode&response_type=code&client_id=812741506391.apps.googleusercontent.com&approval_prompt=force\r\n  \r\n  http://localhost:9000/oauth2/token?code=4/P7q7W91a-oMsCeLvIaQm6bTrgtp7&client_id=8819981768.apps.googleusercontent.com&client_secret=skjdfkjsdhfkj&redirect_uri=https://oauth2-login-demo.appspot.com/code&grant_type=authorization_code\r\n\r\n* Please figure out create your KDC and userRealm yourself. Have fun !\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}